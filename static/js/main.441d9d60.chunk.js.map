{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","registerServiceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","onChange","placeholder","onClick","Component","Track","addTrack","removeTrack","e","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","tokenInURL","window","location","href","match","Spotify","getAccessToken","expiration","setTimeout","history","pushState","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","_savePlaylist","asyncToGenerator","regenerator_default","mark","_callee","trackURIs","_accessToken","userID","wrap","_context","prev","next","length","console","log","abrupt","method","body","JSON","stringify","playlistID","uris","stop","_x","_x2","apply","arguments","App","updatePlaylistName","_this2","results","includes","push","filter","currentTrack","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.441d9d60.chunk.js","sourcesContent":["const clientID = '810f92f9db924ed1aec2d57589caa38c';\r\nconst redirectURI = 'https://blagdaggery.github.io/jammming/';\r\n\r\nlet accessToken;\r\n\r\nvar tokenInURL = window.location.href.match(/access_token=([^&]*)/);\r\n\r\nconst Spotify = {\r\n\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    } else if (tokenInURL) {\r\n      accessToken = tokenInURL[1];\r\n      let expiration = window.location.href.match(/expires_in=([^&]*)/);\r\n      window.setTimeout(() => accessToken = '', expiration[1] * 1000);\r\n      window.history.pushState('Acess Token', null, '/');\r\n    } else {\r\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n    }\r\n  },\r\n\r\n  search(searchTerm) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\r\n      {\r\n        headers: {\"Authorization\": `Bearer ${accessToken}`}\r\n      }\r\n    ).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => {\r\n        return {\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }\r\n      });\r\n    });\r\n  },\r\n\r\n  async savePlaylist(playlistName, trackURIs) {\r\n    if(!playlistName || !trackURIs.length) {\r\n      if (!playlistName) {\r\n        console.log(\"No request made. Please give your playlist a name.\");\r\n      }\r\n      if (!trackURIs.length) {\r\n        console.log(\"No request made. Please add tracks to your playlist.\");\r\n      }\r\n      return;\r\n    } else {\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}` };\r\n      let userID;\r\n      return fetch(\r\n        `https://api.spotify.com/v1/me`,\r\n        {\r\n          headers: headers\r\n        }\r\n      ).then(response => response.json()).then(jsonResponse => {\r\n        userID = jsonResponse.id;\r\n        return fetch(\r\n          `https://api.spotify.com/v1/users/${userID}/playlists`,\r\n          {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({name: playlistName})\r\n          }\r\n        ).then(response => response.json()).then(jsonResponse => {\r\n          const playlistID = jsonResponse.id;\r\n          return fetch(\r\n            `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n            {\r\n              headers: headers,\r\n              method: 'POST',\r\n              body: JSON.stringify({\"uris\": trackURIs})\r\n            }\r\n          );\r\n        });\r\n      });\r\n    }\r\n  } // Closes method\r\n}; // Closes Object\r\n\r\nexport default Spotify;\r\n","import React, { Component } from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {searchTerm: ''};\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.searchTerm);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({searchTerm: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n        <a onClick={this.search}>SEARCH</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(e) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(e) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <a onClick={this.removeTrack} className=\"Track-action\">-</a>;\r\n    } else {\r\n      return <a onClick={this.addTrack} className=\"Track-action\">+</a>;\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React, { Component } from 'react';\r\nimport Track from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nclass TrackList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {this.props.tracks.map(track => {\r\n          return <Track track={track} key={track.id} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval} onRemove={this.props.onRemove}  />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React, { Component } from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList onAdd={this.props.onAdd} tracks={this.props.searchResults} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    const name = event.target.value;\r\n    this.props.onNameChange(name);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input value={this.props.playlistName} onChange={this.handleNameChange}/>\r\n        <TrackList isRemoval={true} onRemove={this.props.onRemove} tracks={this.props.playlistTracks} />\r\n        <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React, { Component } from 'react';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: []\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n  }\r\n\r\n  search(searchTerm) {\r\n    if (!searchTerm.length) {\r\n      console.log(\"No request made. No searchTerm.\");\r\n      return;\r\n    } else {\r\n      Spotify.search(searchTerm).then(results => {\r\n        this.setState({searchResults: results});\r\n      });\r\n    }\r\n  }\r\n\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    if (!tracks.includes(track)) {\r\n      tracks.push(track);\r\n    }\r\n    this.setState({playlistTracks: tracks});\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n    this.setState({playlistTracks: tracks});\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({playlistName: name});\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <p className=\"subtitle\">A Codecademy Project</p>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults\r\n              onAdd={this.addTrack}\r\n              searchResults={this.state.searchResults}\r\n            />\r\n            <Playlist\r\n              playlistName={this.state.playlistName}\r\n              onNameChange={this.updatePlaylistName}\r\n              playlistTracks={this.state.playlistTracks}\r\n              onRemove={this.removeTrack}\r\n              onSave={this.savePlaylist}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}